data1$KCSS[i] = data1$KCSS[i-1]
# 不确定真实账户是否开仓，用虚拟账户计算账户今日收盘后的净值
data1$XNJZ[i] = 10000*data1$KCSS[i]*data1$lag_position_T[i]*(data1$T_close[i]-data1$T_close[i-1])+
10000*data1$KCSS[i]*data1$lag_position_TF[i]*(data1$TF_close[i]-data1$TF_close[i-1]) + data1$XNJZ[i-1]
data1$MAXJZ[i] = max(data1$MAXJZ[i-1],data1$XNJZ[i])
# 如果最大净值发生在今日之前，则今日的ismax为1
if(data1$MAXJZ[i] > data1$XNJZ[i]){data1$ismax[i] = 1}
# 如果最大净值发生在今日，则真实账户有持仓，真实账户的金额等于虚拟持仓的金额
if(data1$ismax[i] == 0){
data1$MINJZ[i] = data1$XNJZ[i]
data1$ZHJE[i] = data1$XNJZ[i]
data1$Drawdowns[i] = (data1$MAXJZ[i] - data1$MINJZ[i])/data1$MAXJZ[i] # 此时最大净值等于虚拟净值等于账户净值等于最小净值，所以回撤为0
data1$XZZJ[i] = (data1$ZHJE[i] - data1$KCSS[i]*max(2*0.012*data1$TF_close[i]*10000,0.02*data1$T_close[i]*10000)*abs(data1$lag_position_T[i]))/data1$ZHJE[i]
}
if(data1$ismax[i]==1){
data1$MINJZ[i] = min(data1$MINJZ[i-1],data1$XNJZ[i])
data1$Drawdowns[i] = (data1$MAXJZ[i] - data1$MINJZ[i])/data1$MAXJZ[i]
#data1$FCSY[i] = (data1$XNJZ[i]-data1$MINJZ[i])/abs(data1$MINJZ[i])
data1$FCSY[i] = (data1$MAXJZ[i]-data1$MINJZ[i])*fanchouxian+data1$MINJZ[i]
if(data1$Drawdowns[i-1]>zhisunxian & data1$XNJZ[i-1] < data1$FCSY[i-1]){
data1$ZHJE[i] = data1$ZHJE[i-1]
data1$XZZJ[i] = 1
}
else{
if(data1$Drawdowns[i-1]>zhisunxian & data1$XNJZ[i-1] >= data1$FCSY[i-1]){
data1$KCSS[i] = floor(data1$ZHJE[i-1]/(max(2*0.012*data1$TF_close[i-1]*10000,0.02*data1$T_close[i-1]*10000)*steps))
#data1$ZHJE[i] = 10000*data1$KCSS[i]*data1$lag_position_T[i]*(data1$T_close[i]-data1$T_close[i-1])+
#10000*data1$KCSS[i]*data1$lag_position_TF[i]*(data1$TF_close[i]-data1$TF_close[i-1]) + data1$ZHJE[i-1]
data1$ZHJE[i] = data1$ZHJE[i-1]
data1$XNJZ[i] = data1$ZHJE[i]
data1$ismax[i] = 0
data1$MAXJZ[i] = data1$ZHJE[i]
data1$MINJZ[i] = data1$ZHJE[i]
data1$XZZJ[i] = 1
}
else{
data1$ZHJE[i] = data1$XNJZ[i]
data1$XZZJ[i] = (data1$ZHJE[i]-data1$KCSS[i]*max(2*0.012*data1$TF_close[i]*10000,0.02*data1$T_close[i]*10000)*abs(data1$lag_position_T[i]))/data1$ZHJE[i]
}
}
}
}
#无仓位
else{
data1$KCSS[i] = 0
data1$ZHJE[i] = data1$ZHJE[i-1]
data1$XNJZ[i] = data1$ZHJE[i-1]
data1$MAXJZ[i] = data1$ZHJE[i]
data1$MINJZ[i] = data1$ZHJE[i]
data1$XZZJ[i] = 1
}
}
}
ggplot(data = data1,aes(date_id,ZHJE)) + geom_line()
data1$date_id <- as.Date(data1$date_id)
data1$return <- data1$ZHJE/lag(data1$ZHJE)-1
data1$return[1] <- 0
mean(data1$XZZJ)
maxDrawdown(data1$return)
Return.annualized(data1$return,scale = 252)
write.csv(data1,"data1.csv")
#write.csv(data1[c('date_id','T_name','TF_name','FutYHret','quan90','quan50','quan10','lag_position_T','lag_position_TF','ZHJE','XNJZ','KCSS','XZZJ',
#'Drawdowns','MAXJZ','MINJZ','ismax','FCSY','return')],"data1.csv")
knitr::opts_chunk$set(warning = F, message = F)
# envrionment
rm(list=ls())
gc()
#读取包
library(dplyr)
library(zoo)
library(graphics)
library(ggplot2)
library(PerformanceAnalytics)
library(TTR)
#读取每日连续合约及其隐含收益率以及五年十年国债实际利差和隐含收益率利差
data1 <- read.csv("T_TFirret.csv")
# head(data1)
data1$date_id <- as.Date(data1$date_id)
data1 <- as.data.frame(data1 %>% mutate(quan90 = NA,quan80 = NA,quan70 = NA,quan60 = NA,quan50 = NA,
quan40 = NA,quan30 = NA,quan20 = NA,quan10 = NA))
# 过去n个交易日的标准差的乘数作为分位点
n = 100
for (i in c(n:nrow(data1))) {
data1$quan90[i] <- sd(data1$FutYHret[(i-n+1):(i-1)],na.rm = TRUE)*2+mean(data1$FutYHret[(i-n+1):(i-1)])
data1$quan80[i] <- sd(data1$FutYHret[(i-n+1):(i-1)],na.rm = TRUE)*1.5+mean(data1$FutYHret[(i-n+1):(i-1)])
data1$quan70[i] <- sd(data1$FutYHret[(i-n+1):(i-1)],na.rm = TRUE)*1+mean(data1$FutYHret[(i-n+1):(i-1)])
data1$quan60[i] <- sd(data1$FutYHret[(i-n+1):(i-1)],na.rm = TRUE)*0.5+mean(data1$FutYHret[(i-n+1):(i-1)])
data1$quan50[i] <- mean(data1$FutYHret[(i-n+1):(i-1)])
data1$quan40[i] <- sd(data1$FutYHret[(i-n+1):(i-1)],na.rm = TRUE)*(-0.5)+mean(data1$FutYHret[(i-n+1):(i-1)])
data1$quan30[i] <- sd(data1$FutYHret[(i-n+1):(i-1)],na.rm = TRUE)*(-1)+mean(data1$FutYHret[(i-n+1):(i-1)])
data1$quan20[i] <- sd(data1$FutYHret[(i-n+1):(i-1)],na.rm = TRUE)*(-1.5)+mean(data1$FutYHret[(i-n+1):(i-1)])
data1$quan10[i] <- sd(data1$FutYHret[(i-n+1):(i-1)],na.rm = TRUE)*(-2)+mean(data1$FutYHret[(i-n+1):(i-1)])
}
data1 <- na.omit(data1)
# head(data1)
# data1 <- subset(data1,data1$date > as.Date('2015-10-21'))
# 读取国债期货收盘价和结算价
priceData <- read.csv("ADPFutureClose2020-09-16.csv")
#head(priceData)
priceData$date_id <- as.Date(priceData$date_id)
names(priceData)[5] <- "T_name"
data1 <- merge(data1,priceData,by = c("date_id","T_name"),all.x = TRUE)
data1 <- data1[,c("date_id","T_name","T_irret","close","settle","TF_name","TF_irret","FutYHret",
"quan90","quan80","quan70","quan60","quan50","quan40","quan30","quan20","quan10")]
names(data1)[4:5] <- c("T_close","T_settle")
names(priceData)[5] <- "TF_name"
data1 <- merge(data1,priceData,by = c("date_id","TF_name"),all.x = TRUE)
data1 <- data1[,c("date_id","T_name","T_irret","T_close","T_settle","TF_name","TF_irret","close","settle","FutYHret",
"quan90","quan80","quan70","quan60","quan50","quan40","quan30","quan20","quan10")]
names(data1)[8:9] <- c("TF_close","TF_settle")
data1 <- as.data.frame(data1 %>% mutate(upDown90 = ifelse(FutYHret >= quan90, 1,ifelse(FutYHret <= quan10, -1, NA)),
upDown80 = ifelse(FutYHret >= quan80, 1,ifelse(FutYHret <= quan20, -1, NA)),
upDown70 = ifelse(FutYHret >= quan70, 1,ifelse(FutYHret <= quan30, -1, NA)),
upDown60 = ifelse(FutYHret >= quan60, 1,ifelse(FutYHret <= quan40, -1, NA))))
data1 <- as.data.frame(data1 %>% mutate(position_T90 = ifelse(FutYHret > quan10 & FutYHret <= quan50,-1,0),
position_TF90 = ifelse(FutYHret > quan10 & FutYHret <= quan50,2,0),
position_T80 = ifelse(FutYHret > quan20 & FutYHret <= quan50,-1,0),
position_TF80 = ifelse(FutYHret > quan20 & FutYHret <= quan50,2,0),
position_T70 = ifelse(FutYHret > quan30 & FutYHret <= quan50,-1,0),
position_TF70 = ifelse(FutYHret > quan30 & FutYHret <= quan50,2,0),
position_T60 = ifelse(FutYHret > quan40 & FutYHret <= quan50,-1,0),
position_TF60 = ifelse(FutYHret > quan40 & FutYHret <= quan50,2,0)))
data1 <- as.data.frame(data1 %>% mutate(position_T90 = ifelse(FutYHret < quan90 & FutYHret > quan50,1,position_T90),
position_TF90 = ifelse(FutYHret < quan90 & FutYHret > quan50,-2,position_TF90),
position_T80 = ifelse(FutYHret < quan80 & FutYHret > quan50,1,position_T80),
position_TF80 = ifelse(FutYHret < quan80 & FutYHret > quan50,-2,position_TF80),
position_T70 = ifelse(FutYHret < quan70 & FutYHret > quan50,1,position_T70),
position_TF70 = ifelse(FutYHret < quan70 & FutYHret > quan50,-2,position_TF70),
position_T60 = ifelse(FutYHret < quan60 & FutYHret > quan50,1,position_T60),
position_TF60 = ifelse(FutYHret < quan60 & FutYHret > quan50,-2,position_TF60)))
data1 <- as.data.frame(data1 %>% mutate(upDown90 = ifelse(abs(position_T90 - dplyr::lag(position_T90))==2 & is.na(upDown90),0,upDown90),
upDown80 = ifelse(abs(position_T80 - dplyr::lag(position_T80))==2 & is.na(upDown80),0,upDown80),
upDown70 = ifelse(abs(position_T70 - dplyr::lag(position_T70))==2 & is.na(upDown70),0,upDown70),
upDown60 = ifelse(abs(position_T60 - dplyr::lag(position_T60))==2 & is.na(upDown60),0,upDown60)))
data1 <- as.data.frame(data1 %>% mutate(upDown90 = na.locf0(upDown90),upDown80 = na.locf0(upDown80),
upDown70 = na.locf0(upDown70),upDown60 = na.locf0(upDown60)))
data1 <- as.data.frame(data1 %>% mutate(position_T90 = ifelse(upDown90 == -1 & FutYHret > quan10 & FutYHret <= quan50,-1,0),
position_TF90 = ifelse(upDown90 == -1 & FutYHret > quan10 & FutYHret <= quan50,2,0),
position_T80 = ifelse(upDown80 == -1 & FutYHret > quan20 & FutYHret <= quan50,-1,0),
position_TF80 = ifelse(upDown80 == -1 & FutYHret > quan20 & FutYHret <= quan50,2,0),
position_T70 = ifelse(upDown70 == -1 & FutYHret > quan30 & FutYHret <= quan50,-1,0),
position_TF70 = ifelse(upDown70 == -1 & FutYHret > quan30 & FutYHret <= quan50,2,0),
position_T60 = ifelse(upDown60 == -1 & FutYHret > quan40 & FutYHret <= quan50,-1,0),
position_TF60 = ifelse(upDown60 == -1 & FutYHret > quan40 & FutYHret <= quan50,2,0)))
data1 <- as.data.frame(data1 %>% mutate(position_T90 = ifelse(upDown90 == 1 & FutYHret < quan90 & FutYHret > quan50,1,position_T90),
position_TF90 = ifelse(upDown90 == 1 & FutYHret < quan90 & FutYHret > quan50,-2,position_TF90),
position_T80 = ifelse(upDown80 == 1 & FutYHret < quan80 & FutYHret > quan50,1,position_T80),
position_TF80 = ifelse(upDown80 == 1 & FutYHret < quan80 & FutYHret > quan50,-2,position_TF80),
position_T70 = ifelse(upDown70 == 1 & FutYHret < quan70 & FutYHret > quan50,1,position_T70),
position_TF70 = ifelse(upDown70 == 1 & FutYHret < quan70 & FutYHret > quan50,-2,position_TF70),
position_T60 = ifelse(upDown60 == 1 & FutYHret < quan60 & FutYHret > quan50,1,position_T60),
position_TF60 = ifelse(upDown60 == 1 & FutYHret < quan60 & FutYHret > quan50,-2,position_TF60)))
data1 <- as.data.frame(data1 %>% mutate(position_T90 = ifelse(FutYHret >= quan90,1,position_T90),
position_TF90 = ifelse(FutYHret >= quan90,-2,position_TF90),
position_T80 = ifelse(FutYHret >= quan80,1,position_T80),
position_TF80 = ifelse(FutYHret >= quan80,-2,position_TF80),
position_T70 = ifelse(FutYHret >= quan70,1,position_T70),
position_TF70 = ifelse(FutYHret >= quan70,-2,position_TF70),
position_T60 = ifelse(FutYHret >= quan60,1,position_T60),
position_TF60 = ifelse(FutYHret >= quan60,-2,position_TF60)))
data1 <- as.data.frame(data1 %>% mutate(position_T90 = ifelse(FutYHret <= quan10,-1,position_T90),
position_TF90 = ifelse(FutYHret <= quan10,2,position_TF90),
position_T80 = ifelse(FutYHret <= quan20,-1,position_T80),
position_TF80 = ifelse(FutYHret <= quan20,2,position_TF80),
position_T70 = ifelse(FutYHret <= quan30,-1,position_T70),
position_TF70 = ifelse(FutYHret <= quan30,2,position_TF70),
position_T60 = ifelse(FutYHret <= quan40,-1,position_T60),
position_TF60 = ifelse(FutYHret <= quan40,2,position_TF60)))
steps = 4
data1 <- as.data.frame(data1 %>% mutate(position_T = position_T90+position_T80+position_T70+position_T60,
position_TF = position_TF90+position_TF80+position_TF70+position_TF60))
data1$lag_position_T <- lag(data1$position_T)
data1$lag_position_TF <- lag(data1$position_TF)
data1 <- as.data.frame(data1 %>% mutate(lag_position_T = ifelse(is.na(lag_position_T),0,lag_position_T),
lag_position_TF = ifelse(is.na(lag_position_TF),0,lag_position_TF)))
# data1 <- subset(data1,date_id < as.Date("2020-01-01"))
#计算合约开仓时账户金额
data1$ZHJE <- 1000000
#计算合约开仓手数
data1$KCSS <- 0
#计算闲置资金占比
data1$XZZJ <- 0
#加入止损策略，在组合的净值基础性加入回撤，将回撤平仓线和反抽开仓线分别设置为10%和20%。
#其中回撤平仓线是指当组合的净值在本次开仓后最大回撤大于15%时则平仓，平仓后如果此时虚拟持仓的净值较平仓时的值与平仓后至今最低点的值回升了20%，且还满足开仓条件则再次开仓。
#计算每一次的开仓点位后的回撤
data1$Drawdowns = 0
#需要用到两个变量，当前交易下的期间最大的净值和最大净值之后出现的最小净值
data1$MAXJZ = 0
data1$MINJZ = 0
#判断是否是最大净值之后需要辅助变量
data1$ismax = 0
#平仓后计算虚拟持仓以计算反抽收益
data1$XNJZ = 1000000
#平仓后计算反抽收益
data1$FCSY = 0
#data1 <- subset(data1,data1$date_id < as.Date('2020-01-01'))
zhisunxian <- 0.05
fanchouxian <- 0.20
#计算
for (i in c(2:length(data1$date_id))) {
# i=51
# 开仓首日
if(data1$lag_position_T[i-1]==0 & data1$lag_position_T[i]!=0){
# 开仓手数以昨日真实账户净值和前一日的收盘价作为开仓手数（早盘开仓）
data1$KCSS[i] = floor(data1$ZHJE[i-1]/(max(2*0.012*data1$TF_close[i-1]*10000,0.02*data1$T_close[i-1]*10000)*steps))
# 今日收盘后的账户资金
data1$ZHJE[i] = 10000*data1$KCSS[i]*data1$lag_position_T[i]*(data1$T_close[i]-data1$T_close[i-1])+
10000*data1$KCSS[i]*data1$lag_position_TF[i]*(data1$TF_close[i]-data1$TF_close[i-1]) + data1$ZHJE[i-1]
# 最大净值为前一日最大资金和今日账户资金最大值
data1$MAXJZ[i] = max(data1$MAXJZ[i-1],data1$ZHJE[i])
# 最小净值为前一日最小资金和今日账户资金最小值
data1$MINJZ[i] = min(data1$MINJZ[i-1],data1$ZHJE[i])
# 首日开仓将账户资金的值赋予虚拟账户的净值
data1$XNJZ[i] = data1$ZHJE[i]
# 如果最大净值出现在过去，也就是首日亏损，则ismax=1
if(data1$MAXJZ[i] > data1$ZHJE[i]){data1$ismax[i] = 1}
# 计算闲置资金
data1$XZZJ[i] = (data1$ZHJE[i] - data1$KCSS[i]*max(2*0.012*data1$TF_close[i]*10000,0.02*data1$T_close[i]*10000)*abs(data1$lag_position_T[i]))/data1$ZHJE[i]
}
else{
# 非首日开仓
if(data1$lag_position_T[i-1]!=0 & data1$lag_position_T[i]!=0){
# 顺眼上一日的持仓手数
data1$KCSS[i] = data1$KCSS[i-1]
# 不确定真实账户是否开仓，用虚拟账户计算账户今日收盘后的净值
data1$XNJZ[i] = 10000*data1$KCSS[i]*data1$lag_position_T[i]*(data1$T_close[i]-data1$T_close[i-1])+
10000*data1$KCSS[i]*data1$lag_position_TF[i]*(data1$TF_close[i]-data1$TF_close[i-1]) + data1$XNJZ[i-1]
data1$MAXJZ[i] = max(data1$MAXJZ[i-1],data1$XNJZ[i])
# 如果最大净值发生在今日之前，则今日的ismax为1
if(data1$MAXJZ[i] > data1$XNJZ[i]){data1$ismax[i] = 1}
# 如果最大净值发生在今日，则真实账户有持仓，真实账户的金额等于虚拟持仓的金额
if(data1$ismax[i] == 0){
data1$MINJZ[i] = data1$XNJZ[i]
data1$ZHJE[i] = data1$XNJZ[i]
data1$Drawdowns[i] = (data1$MAXJZ[i] - data1$MINJZ[i])/data1$MAXJZ[i] # 此时最大净值等于虚拟净值等于账户净值等于最小净值，所以回撤为0
data1$XZZJ[i] = (data1$ZHJE[i] - data1$KCSS[i]*max(2*0.012*data1$TF_close[i]*10000,0.02*data1$T_close[i]*10000)*abs(data1$lag_position_T[i]))/data1$ZHJE[i]
}
if(data1$ismax[i]==1){
data1$MINJZ[i] = min(data1$MINJZ[i-1],data1$XNJZ[i])
data1$Drawdowns[i] = (data1$MAXJZ[i] - data1$MINJZ[i])/data1$MAXJZ[i]
#data1$FCSY[i] = (data1$XNJZ[i]-data1$MINJZ[i])/abs(data1$MINJZ[i])
data1$FCSY[i] = (data1$MAXJZ[i]-data1$MINJZ[i])*fanchouxian+data1$MINJZ[i]
if(data1$Drawdowns[i-1]>zhisunxian & data1$XNJZ[i-1] < data1$FCSY[i-1]){
data1$ZHJE[i] = data1$ZHJE[i-1]
data1$XZZJ[i] = 1
}
else{
if(data1$Drawdowns[i-1]>zhisunxian & data1$XNJZ[i-1] >= data1$FCSY[i-1]){
data1$KCSS[i] = floor(data1$ZHJE[i-1]/(max(2*0.012*data1$TF_close[i-1]*10000,0.02*data1$T_close[i-1]*10000)*steps))
#data1$ZHJE[i] = 10000*data1$KCSS[i]*data1$lag_position_T[i]*(data1$T_close[i]-data1$T_close[i-1])+
#10000*data1$KCSS[i]*data1$lag_position_TF[i]*(data1$TF_close[i]-data1$TF_close[i-1]) + data1$ZHJE[i-1]
data1$ZHJE[i] = data1$ZHJE[i-1]
data1$XNJZ[i] = data1$ZHJE[i]
data1$ismax[i] = 0
data1$MAXJZ[i] = data1$ZHJE[i]
data1$MINJZ[i] = data1$ZHJE[i]
data1$XZZJ[i] = 1
}
else{
data1$ZHJE[i] = data1$XNJZ[i]
data1$XZZJ[i] = (data1$ZHJE[i]-data1$KCSS[i]*max(2*0.012*data1$TF_close[i]*10000,0.02*data1$T_close[i]*10000)*abs(data1$lag_position_T[i]))/data1$ZHJE[i]
}
}
}
}
#无仓位
else{
data1$KCSS[i] = 0
data1$ZHJE[i] = data1$ZHJE[i-1]
data1$XNJZ[i] = data1$ZHJE[i-1]
data1$MAXJZ[i] = data1$ZHJE[i]
data1$MINJZ[i] = data1$ZHJE[i]
data1$XZZJ[i] = 1
}
}
}
ggplot(data = data1,aes(date_id,ZHJE)) + geom_line()
data1$date_id <- as.Date(data1$date_id)
data1$return <- data1$ZHJE/lag(data1$ZHJE)-1
data1$return[1] <- 0
mean(data1$XZZJ)
maxDrawdown(data1$return)
Return.annualized(data1$return,scale = 252)
write.csv(data1,"data1.csv")
#write.csv(data1[c('date_id','T_name','TF_name','FutYHret','quan90','quan50','quan10','lag_position_T','lag_position_TF','ZHJE','XNJZ','KCSS','XZZJ',
#'Drawdowns','MAXJZ','MINJZ','ismax','FCSY','return')],"data1.csv")
knitr::opts_chunk$set(warning = F, message = F)
# envrionment
rm(list=ls())
gc()
#读取包
library(dplyr)
library(zoo)
library(graphics)
library(ggplot2)
library(PerformanceAnalytics)
library(TTR)
library(hht)
library(scatterplot3d)
MT_calculator <- function(int_data,series_name, MT_m, MT_n){
#int_data <- data
#series_name <- 'R_10'
interestArray <- int_data[,series_name]
#MT_m <- 60
#MT_n <- 40
#创建空序列
MTM <- rep(NA, length(interestArray))
delta_MT <- rep(NA, length(interestArray))
MAMTM <-  rep(NA, length(interestArray))
#循环体，计算MT指标
for(i in c((MT_n+1):length(interestArray))){
MTM[i] <- interestArray[i] - interestArray[i-MT_n]
MAMTM[i] <- mean(MTM[(i-MT_m+1):i])
delta_MT[i] <- MTM[i] - MAMTM[i]
}
int_data <- as.data.frame(int_data %>% mutate(MTM = MTM,MAMTM = MAMTM,delta_MT = delta_MT))
return(int_data)
}
MT_signal <- function(int_data){
# int_data = IND_MT
int_data$Re_MT <- apply(int_data,1,FUN = function(X) {
ifelse(as.numeric(X['MTM'])>0&as.numeric(X['delta_MT'])>0,1,
ifelse(as.numeric(X['MTM'])<0&as.numeric(X['delta_MT'])<0,-1,0))
})
return(int_data)
}
#希尔伯特变换
??HilbertTransform
#
HT_calculator <- function(int_data, series_name, HT_m, HT_n){
# int_data <- IND_MT
interestArray <- int_data[,series_name]
# HT_m <- 80
# HT_n <- 20
#创建空序列
HT <- rep(NA, length(interestArray))
#循环体，计算HT指标
AVG_R <- SMA(interestArray, HT_n)
diff_R <- c(NA,diff(AVG_R))
for(i in c((HT_m+1):length(diff_R))){
HT[i] = HilbertTransform(diff_R[(i-HT_m):i])[HT_m]
}
int_data <- as.data.frame(int_data %>% mutate(HT = HT))
return(int_data)
}
#综合胜率、调仓频率、模拟资产组合累计收益率等指标，
#胜率以信号为正期间，收益率或价格上行占交易日天数的比例，信号为负期间，收益率或价格下行占交易日天数的比例。信号为震荡，则比较收益率上行与下行的与1的比例。
#调仓频率以平均调仓时间作为指标。
#模拟资产累计收益率对于收益率序列而言，做多做空期间取绝对数，震荡期间为0，对于价格序列而言则以虚拟资金100万为起始资金计算最终净值。
win_rate <- function(int_data, series_name, HT_m, HT_n, MT_m, MT_n){
# int_data <- data
# series_name <- 'R_10'
# MT_m = 30
# MT_n = 70
# HT_m = 80
# HT_n = 20
# 计算收益率或价格与前一日的差值
int_data$CHANGE <- c(NA, diff(int_data[,series_name]))
#趋势指标
IND_MT <- MT_calculator(int_data, series_name, MT_m, MT_n)
IND_MT <- MT_signal(int_data=IND_MT)
#波动指标
IND_HT <- HT_calculator(int_data = IND_MT, series_name,  HT_m, HT_n)
#实部>0：看多；实部<0：看空
IND_HT$Re_HT <- ifelse(Re(IND_HT$HT)>0,1,-1)
IND_HT <- na.omit(IND_HT)
#寻找“共振区间”
IND_HT$SIGNAL <- ifelse(IND_HT$Re_MT>0&IND_HT$Re_HT>0,1,ifelse(IND_HT$Re_MT<0&IND_HT$Re_HT<0,-1,NA))
IND_HT$SIGNAL <- ifelse(is.na(IND_HT$SIGNAL),0,IND_HT$SIGNAL)
# 胜率：如果收益率上升或者价格上升则对应于信号为正的方向胜利，如果为负且对应于信号为负的方向胜利，如果持平或信号为0
IND_HT$win <- ifelse(IND_HT$CHANGE*IND_HT$SIGNAL>0,1,ifelse(IND_HT$CHANGE*IND_HT$SIGNAL<0,-1,0))
winrate <- table(IND_HT$win)[3]/(table(IND_HT$SIGNAL)[1] + table(IND_HT$SIGNAL)[3])
# 调仓频率：
IND_HT$positionChange <- c(0, abs(diff(IND_HT$SIGNAL)))
IND_HT$positionChange <- ifelse(IND_HT$positionChange == 0,0,1)
freq <- length(IND_HT$positionChange)/sum(IND_HT$positionChange)
# 累计收益率：累加价格变动（或收益率变动）与模型方向的乘积
IND_HT$cumSeries <- IND_HT[,series_name] + cumsum(IND_HT$CHANGE*IND_HT$SIGNAL)
cumSeries <- IND_HT$cumSeries[length(IND_HT$cumSeries)]
return(c(as.numeric(winrate), freq, cumSeries))
# return(IND_HT)
}
data <- read.csv("国债到期收益率(中证)(日).csv")
# head(data)
data$DATE_ID <- as.Date(data$DATE_ID)
# 以2007/12/14至2017/12/31的10年期国债利率作为历史回测
data <- subset(data,DATE_ID <= as.Date('2018-01-01'))
result <- data.frame(num = c(1:99),MT_m = NA, MT_n = NA, HT_m = NA, HT_n = NA, winrate = NA, freq = NA, cumSeries = NA)
# 由于MT_m必须小于MT_n，所以MT_m必须小于60
for (m in seq(10, 50, by = 10)) {
for (n in seq(10, 90, by = 10)) {
temp <- win_rate(int_data=data,series_name='R_10', MT_m = m, MT_n = (100-m), HT_m = n, HT_n = (100-n))
result[m+(n/10),c(2:8)] <- c(m,(100-m),n,(100-n),temp[1],temp[2],temp[3])
}
}
result <- na.omit(result)
#
write.csv(result,"result.csv")
data <- win_rate(int_data=data,series_name='R_10', MT_m = 40, MT_n = 60, HT_m = 80, HT_n = 20)
write.csv(data,"data.csv")
# 综合胜率从低向高、调仓频率越慢越好、模拟资产组合累计收益率最高越好
result <- as.data.frame(result %>% mutate(rank_winrate = rank(winrate),rank_freq = rank(freq),rank_cumSeries = rank(cumSeries)))
result$rank <- result$rank_winrate + result$rank_freq + result$rank_cumSeries
chart1 <- scatterplot3d(result$MT_m,result$HT_m,result$rank_winrate,highlight.3d = TRUE)
chart2 <- scatterplot3d(result$MT_m,result$HT_m,result$rank_freq,highlight.3d = TRUE)
chart3 <- scatterplot3d(result$MT_m,result$HT_m,result$rank_cumSeries,highlight.3d = TRUE)
chart4 <- scatterplot3d(result$MT_m,result$HT_m,result$rank,highlight.3d = TRUE)
#读取2007年12月14日至2020年11月16日十年国债到期收益率序列
data <- read.csv("国债到期收益率(中证)(日).csv")
# head(data)
data$DATE_ID <- as.Date(data$DATE_ID)
#以2007/12/14至2017/12/31的10年期国债利率作为历史回测
data <- subset(data,DATE_ID <= as.Date('2018-01-01'))
#趋势指标
IND_MT <- MT_calculator(int_data = data, series_name = 'R_10', MT_m = 10, MT_n = 90)
IND_MT <- MT_signal(int_data=IND_MT)
#波动指标
IND_HT <- HT_calculator(int_data = IND_MT, series_name = 'R_10', HT_m = 40, HT_n = 60)
#实部>0：看多；实部<0：看空
IND_HT$Re_HT <- ifelse(Re(IND_HT$HT)>0,1,-1)
IND_HT <- na.omit(IND_HT)
#寻找“共振区间”
IND_HT$SIGNAL <- ifelse(IND_HT$Re_MT>0&IND_HT$Re_HT>0,1,ifelse(IND_HT$Re_MT<0&IND_HT$Re_HT<0,-1,NA))
IND_HT$SIGNAL <- ifelse(is.na(IND_HT$SIGNAL),0,IND_HT$SIGNAL)
write.csv(IND_HT,'IND_HT.csv')
#为了方便作图，将数字信号改为文本
IND_HT$Re_HT <- ifelse(IND_HT$Re_HT == 1,'up',ifelse(IND_HT$Re_HT == -1,'down','steady'))
IND_HT$Re_MT <- ifelse(IND_HT$Re_MT == 1,'up',ifelse(IND_HT$Re_MT == -1,'down','steady'))
IND_HT$SIGNAL <- ifelse(IND_HT$SIGNAL == 1,'up',ifelse(IND_HT$SIGNAL == -1,'down','steady'))
#在十年期利率走势图中划出判断的结果。
ggplot(IND_HT,aes(x=DATE_ID,y=R_10,colour = Re_HT))+geom_point()
ggplot(IND_HT,aes(x=DATE_ID,y=R_10,colour = Re_MT))+geom_point()
ggplot(IND_HT,aes(x=DATE_ID,y=R_10,colour = SIGNAL))+geom_point()
#读取2007年12月14日至2020年11月16日十年国债到期收益率序列
data <- read.csv("国债到期收益率(中证)(日).csv")
# head(data)
data$DATE_ID <- as.Date(data$DATE_ID)
#趋势指标
IND_MT <- MT_calculator(int_data=data, series_name = 'R_10',MT_m = 10,MT_n= 90)
IND_MT <- MT_signal(int_data=IND_MT)
#波动指标
IND_HT <- HT_calculator(int_data=IND_MT, series_name = 'R_10',HT_m = 40,HT_n = 60)
#实部>0：看多；实部<0：看空
IND_HT$Re_HT <- ifelse(Re(IND_HT$HT)>0,1,-1)
#样本外2018年
IND_HT <- subset(IND_HT,DATE_ID > as.Date('2018-01-01'))
IND_HT <- na.omit(IND_HT)
#寻找“共振区间”
IND_HT$SIGNAL <- ifelse(IND_HT$Re_MT>0&IND_HT$Re_HT>0,1,ifelse(IND_HT$Re_MT<0&IND_HT$Re_HT<0,-1,NA))
IND_HT$SIGNAL <- ifelse(is.na(IND_HT$SIGNAL),0,IND_HT$SIGNAL)
#为了方便作图，将数字信号改为文本
IND_HT$Re_HT <- ifelse(IND_HT$Re_HT == 1,'up',ifelse(IND_HT$Re_HT == -1,'down','steady'))
IND_HT$Re_MT <- ifelse(IND_HT$Re_MT == 1,'up',ifelse(IND_HT$Re_MT == -1,'down','steady'))
IND_HT$SIGNAL <- ifelse(IND_HT$SIGNAL == 1,'up',ifelse(IND_HT$SIGNAL == -1,'down','steady'))
#在十年期利率走势图中划出判断的结果。
ggplot(IND_HT,aes(x=DATE_ID,y=R_10,colour = Re_HT))+geom_point()
ggplot(IND_HT,aes(x=DATE_ID,y=R_10,colour = Re_MT))+geom_point()
ggplot(IND_HT,aes(x=DATE_ID,y=R_10,colour = SIGNAL))+geom_point()
#读取2015年8月17日至2020年11月16日十年国债期货的隐含收益率数据
data1 <- read.csv("T_TFirret.csv")
# head(data1)
data1$date_id <- as.Date(data1$date_id)
result <- data.frame(num = c(1:99),MT_m = NA, MT_n = NA, HT_m = NA, HT_n = NA, winrate = NA, freq = NA, cumSeries = NA)
# 由于MT_m必须小于MT_n，所以MT_m必须小于60
for (m in seq(10, 50, by = 10)) {
for (n in seq(10, 90, by = 10)) {
temp <- win_rate(int_data=data1,series_name='T_irret', MT_m = m, MT_n = (100-m), HT_m = n, HT_n = (100-n))
result[m+(n/10),c(2:8)] <- c(m,(100-m),n,(100-n),temp[1],temp[2],temp[3])
}
}
result <- na.omit(result)
# 综合胜率从低向高、调仓频率越慢越好、模拟资产组合累计收益率最高越好
result <- as.data.frame(result %>% mutate(rank_winrate = rank(winrate),rank_freq = rank(freq),rank_cumSeries = rank(cumSeries)))
result$rank <- result$rank_winrate + result$rank_freq + result$rank_cumSeries
chart1 <- scatterplot3d(result$MT_m,result$HT_m,result$rank_winrate,highlight.3d = TRUE)
chart2 <- scatterplot3d(result$MT_m,result$HT_m,result$rank_freq,highlight.3d = TRUE)
chart3 <- scatterplot3d(result$MT_m,result$HT_m,result$rank_cumSeries,highlight.3d = TRUE)
chart4 <- scatterplot3d(result$MT_m,result$HT_m,result$rank,highlight.3d = TRUE)
# data1 <- win_rate(int_data=data1,series_name='T_irret', MT_m = 40, MT_n = 60, HT_m = 80, HT_n = 20)
# write.csv(data1,"data1.csv")
#读取2007年12月14日至2020年11月16日十年国债到期收益率序列
data <- read.csv("T_TFirret.csv")
# head(data)
data$date_id <- as.Date(data$date_id)
#趋势指标
IND_MT <- MT_calculator(int_data=data, series_name = 'T_irret',MT_m = 10,MT_n= 90)
IND_MT <- MT_signal(int_data=IND_MT)
#波动指标
IND_HT <- HT_calculator(int_data=IND_MT, series_name = 'T_irret',HT_m = 30,HT_n = 70)
#实部>0：看多；实部<0：看空
IND_HT$Re_HT <- ifelse(Re(IND_HT$HT)>0,1,-1)
IND_HT <- na.omit(IND_HT)
#寻找“共振区间”
IND_HT$SIGNAL <- ifelse(IND_HT$Re_MT>0&IND_HT$Re_HT>0,1,ifelse(IND_HT$Re_MT<0&IND_HT$Re_HT<0,-1,NA))
IND_HT$SIGNAL <- ifelse(is.na(IND_HT$SIGNAL),0,IND_HT$SIGNAL)
#为了方便作图，将数字信号改为文本
IND_HT$Re_HT <- ifelse(IND_HT$Re_HT == 1,'up',ifelse(IND_HT$Re_HT == -1,'down','steady'))
IND_HT$Re_MT <- ifelse(IND_HT$Re_MT == 1,'up',ifelse(IND_HT$Re_MT == -1,'down','steady'))
IND_HT$SIGNAL <- ifelse(IND_HT$SIGNAL == 1,'up',ifelse(IND_HT$SIGNAL == -1,'down','steady'))
#在十年期利率走势图中划出判断的结果。
ggplot(IND_HT,aes(x=date_id,y=T_irret,colour = Re_HT))+geom_point()
ggplot(IND_HT,aes(x=date_id,y=T_irret,colour = Re_MT))+geom_point()
ggplot(IND_HT,aes(x=date_id,y=T_irret,colour = SIGNAL))+geom_point()
#读取2015年3月20日至2020年11月16日十年国债到期收益率序列
data <- read.csv("FutureClose2020-11-16.csv")
# head(data)
data$date_id <- as.Date(data$date_id)
#趋势指标
IND_MT <- MT_calculator(int_data=data, series_name = 'close',MT_m = 30,MT_n= 70)
IND_MT <- MT_signal(int_data=IND_MT)
#波动指标
IND_HT <- HT_calculator(int_data=IND_MT, series_name = 'close',HT_m = 60,HT_n = 40)
